#자료형 확인 함수
is.numeric(x) 수치형 여부
is.logical(x) 논리형 여부
is.character(x) 문자형 여부
is. integer(x) 정수형 여부
is.data.frame(x) 데이터 프레임 여부

#자료형 변환
as.numeric(x) 수치형 변환
as.logical(x) 논리형 변환
as.character(x) 문자형 변환
as. integer(x) 정수형 변환
as.data.frame(x) 데이터 프레임 변환
as.vector(x) 벡터형 변환

x <- c(1, 2, "3")
x
[1] "1" "2" "3"
>result <- as.numeric(x) * 3
>#result <- as.integer(x) * 3 같은 결과 반한
>result
[1] 3 6 9

#자료형과 자료구조 보기
mode() 함수를 이용하여 자료형 확인
class() 함수를 이용하여 자료구조 즉, 메모리 구조 확인

>mode(int)
[1] "numeric"
>class(int)
[1] "numeric"

# R에서 제공하는 주요 자료구조
1) Vector(1차원 배열)
2) Matrix(2차원 배열)
3) Array(다차원 배열)
4) Data Frame(2차원 테이블 구조)
5) List(자료구조 중첩)

# vector(벡터)는 R에서 가장 기본이 되는 자료구조
- 연속된 선형구조의 형태로 만들어지고, 첨자(index)에 의해서 접근할 수 있다
- 변수[첨자(index)] *index는 1부터 시작
- 같은 자료형의 데이터만 저장
- 벡터 생성 함수: c(), seq(), rep()
- 벡터 자료 처리 함수: union(), setdiff(), intersect()

>c(1:10)
[1] 1 2 3 4 5 6 7 8 9 10
>1:10  
# c() 함수와 동일
[1] 1 2 3 4 5 6 7 8 9 10
>c(1, 2, 3, 4, 5) 
#c(1:5)와 동일
[1] 1 2 3 4 5

>seq(1, 10, 2) # squcnce value 함수 1부터 10까지 2씩 증가
[1] 1 3 5 7 9

>rep(1:3,3) # replicate value 함수 
[1] 1 2 3 1 2 3 1 2 3

>rep(1:3, each=3) # each는 각 자료가 반복할 횟수를 지정
[1] 1 1 1 2 2 2 3 3 3

# 벡터 자료 처리
x <- c(1, 3, 5, 7)
y <- c(3, 5)
> union(x, y) # x와 y의 합집합
[1] 1 3 5 7
> setdiff(x, y) # x에 있는데, y에 없는 값
[1] 1, 7
> intersect(x, y) # x와 y에 공통으로 있는 값
[1] 3 5

# 벡터 자료는 반드시 같은 유형의 자료만 하나의 변수에 저장
혼합이 되는 경우 데이터 유형이 변경

# 벡터 객체의 값에 컬럼명 지정
names() 함수를 이용하여 벡터 객체에 저장된 벡터 데이터에 갈럼명을 지정
age <- c(30, 35, 40)
> age
[1] 30 35 40
names(age) <- c("홍", "이", "강") #c()함수로 칼럼명을 만들고, names() 함수로 각 데이터에 칼러명 지정
>age
홍  이   강
30  35  40
>age <- NULL # NULL 값을 대입하여 벡터 객체를 메모리에서 제거

#벡터 자료 참조하기
a <- c(1:20) # 벡터 객체 생성
>a[10:15] #10~15사이의 벡터 원소 출력
[1] 10 11 12 13 14 15
>a[10:(length(a)-5)] # 10부터 백터 전체 길이에서 5 뺀 15만큼 출력
[1] 10 11 12 13 14 15

첨자는 콜론(:)으로 범위를 지정

#c()함수에서 콤마 사용
v1 <- c(13, -5, 20:23 ,12, -1:3)
>v1
[1] 13 -5 20 21 22 23 12 -1 0 1 2 3
>v1[1]
[1] 13
>v1[c(2,4)]
[1] -5 21
>v1[c(3:5)]
[1] 20 21 22
>v1[c(4, 5:8, 7)]
[1] 21 22 23 12 -2 12

#음수 값으로 첨자를 사용하면 여집합의 개념으로 해당 첨자가 제외
>v1[-1]
[1] -5 20 21 22 23 12 -1 0 1 2 3
>v1[-c(2,4)]
[1] 13 20 22 23 12 -1 0 1 2 3
>v1[-c(2:5)]
[1] 13 23 12 -1 0 1 2 3


#Matrix 자료구조 : 행렬 자료구조, 같은 자료형을 갖는 2차원의 배열 구조
- 행렬 생성 함수: matrix(), rbind(), cbind()
- 행렬 자료 처리 함수: apply()

# 백터를 이용한 행렬 객체 생성
> m<-matrix(c(1:5))  # 열을 기준으로 행렬 객체가 만들어짐
> m
     [,1]
[1,]    1
[2,]    2
[3,]    3
[4,]    4
[5,]    5

> m <- matrix(c(1:10),nrow=2)
# 열 우선으로 2행
> m
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    3    5    7    9
[2,]    2    4    6    8   10

> m <- matrix(c(1:11),nrow=2)
경고메시지(들): 
In matrix(c(1:11), nrow = 2) :
  데이터의 길이[11]가 행의 개수[2]의 배수가 되지 않습니다
> m
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    1    3    5    7    9   11
[2,]    2    4    6    8   10    1
> m <- matrix(c(1:10),nrow=2, byrow=T)
> m
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    2    3    4    5
[2,]    6    7    8    9   10

#행 묶음으로 행렬 객체 생성
# rbind()함수
> x1 <- c(5, 40, 50:52)
> x2 <- c(30, 5, 6:8)
> mr <- rbind(x1,x2)
> mr
   [,1] [,2] [,3] [,4] [,5]
x1    5   40   50   51   52
x2   30    5    6    7    8

#열 묶음으로 행렬 객체 생성
# cbind() 함수
> mc <- cbind(x1,x2)
> mc
     x1 x2
[1,]  5 30
[2,] 40  5
[3,] 50  6
[4,] 51  7
[5,] 52  8

#matrix()함수 이용 행렬 객체 생성
> m3 <-matrix(10:19,2)
> m4 <- matrix(10:20,2)
경고메시지(들): 
In matrix(10:20, 2) :
  데이터의 길이[11]가 행의 개수[2]의 배수가 되지 않습니다
> m3
     [,1] [,2] [,3] [,4] [,5]
[1,]   10   12   14   16   18
[2,]   11   13   15   17   19

> m3[1,]
[1] 10 12 14 16 18
> m3[,5]
[1] 18 19
> m3[2,3]
[1] 15
> m3[1,c(2:5)]
[1] 12 14 16 18

> length(m3)
[1] 10
> ncol(m3)
[1] 5
> nrow(m3)
[1] 2

#Array 자료구조: 같은 자료형을 갖는 다차원 배열구조
#배열 생성 함수: array()
> vec <- c(1:12)
> arr <- array(vec, c(3,2,2))
> arr
, , 1

     [,1] [,2]
[1,]    1    4
[2,]    2    5
[3,]    3    6

, , 2

     [,1] [,2]
[1,]    7   10
[2,]    8   11
[3,]    9   12

> arr[,,1]
     [,1] [,2]
[1,]    1    4
[2,]    2    5
[3,]    3    6
> arr[,,2]
     [,1] [,2]
[1,]    7   10
[2,]    8   11
[3,]    9   12